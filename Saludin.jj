options {
  STATIC = false;
  LOOKAHEAD = 3;
}

PARSER_BEGIN(Saludin)
//xd vamos a ver si sirve
    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    import java.io.BufferedWriter;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.io.*;

    public class Saludin {
        // Lista para almacenar los errores léxicos
        private List<String> erroresLexicos = new ArrayList<String>();
        // Lista para almacenar los errores sintácticos
        private List<String> erroresSintacticos = new ArrayList<String>();
        // Lista para almacenar los errores semánticos
        private List<String> erroresSemanticos = new ArrayList<String>();
        // Tabla de símbolos para el análisis semántico
        private Map<String, String> tablaSimbolos = new HashMap<String, String>();
        static StringBuilder cppCode = new StringBuilder();


        // Contador de etiquetas para generación de código intermedio
        static int etiquetaCount = 0;
        // Contador de temporales
        static int sumTemp = 0;

        // Lista para almacenar los cuádruplos
        static List<String[]> cuadruplos = new ArrayList<String[]>();
        static List<String[]> cuadruplosOptimizado = new ArrayList<String[]>();

        // Método para generar etiquetas únicas
        static String genEtiqueta() {
            return "L" + etiquetaCount++;
        }

        // Método para generar temporales únicos
        static String genTemporal() {
            return "t" + sumTemp++;
        }

        public static void main(String args[]) throws ParseException, IOException {
            Saludin parser = new Saludin(System.in);

            parser.iniciarAnalisis();
            parser.reportarErrores();
            if (parser.erroresLexicos.isEmpty() && parser.erroresSintacticos.isEmpty() && parser.erroresSemanticos.isEmpty()) {
                System.out.println("COMPILACIÓN EXITOSA ^^ .");
            } else {
                System.out.println("Se encontraron errores léxicos, sintácticos o semánticos.");
            }
        }

         // Función para generar código C++ y escribirlo en un archivo .cpp
          public void writeCppToFile() {
              BufferedWriter writer = null;
              try {
                  writer = new BufferedWriter(new FileWriter("output.cpp"));
                  writer.write(cppCode.toString());
                  System.out.println("C++ generado correctamente");
              } catch (IOException e) {
                  e.printStackTrace();
              } finally {
                  if (writer != null) {
                      try {
                          writer.close();
                      } catch (IOException e) {
                          e.printStackTrace();
                      }
                  }
              }
              EjecutarComando();
          }


          public void EjecutarComando(){
                  try {
                      ProcessBuilder builder = new ProcessBuilder("g++","output.cpp","-o", "mi_programa");
                      Process proceso = builder.start();

                      // Leer la salida de errores
                     BufferedReader errorReader = new BufferedReader(new InputStreamReader(proceso.getErrorStream()));
                      String linea;
                     while ((linea = errorReader.readLine()) != null) {
                          System.out.println("Error: " + linea);
                      }
                      // Leer la salida estándar
                      BufferedReader reader = new BufferedReader(new InputStreamReader(proceso.getInputStream()));
                      while ((linea = reader.readLine()) != null) {
                          System.out.println(linea);
                      }

                      reader.close();
                     errorReader.close();
                      System.out.println("El ejecutable se generó en: mi_programa.exe");
                  } catch(Exception e) {
                      e.printStackTrace();
                  }}


        public void codeDirection(String op, String arg1, String arg2, String result) {
            cuadruplos.add(new String[]{op, arg1, arg2, result});
        }

        static void ImpIntermedio() {
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter("cuadruplos.txt"));
            for (String[] cuadruplo : cuadruplos) {
                writer.write("(" + String.join(", ", cuadruplo) + ")");
                writer.newLine();
            }
            cuadruplosOptimizado= optimizarCuadruplas(cuadruplos);
            ImpIntermedioOpt();
        } catch (IOException e) {
            System.err.println("Error writing to file: " + e.getMessage());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    System.err.println("Error closing the writer: " + e.getMessage());
                }
            }
        }
    }


    static void ImpIntermedioOpt() {
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter("cuadruplosOPtimizado.txt"));
            for (String[] cuadruplo : cuadruplosOptimizado) {
                writer.write("(" + String.join(", ", cuadruplo) + ")");
                writer.newLine();
            }
        } catch (IOException e) {
            System.err.println("Error writing to file: " + e.getMessage());
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    System.err.println("Error closing the writer: " + e.getMessage());
                }
            }
        }
    }

    //IMPRIMECuadruplas Optimizadas por propagacion_de_Constantes
    public static List<String[]> optimizarCuadruplas(List<String[]> cuadruplasOriginal) {
        List<String[]> cuadruplasOptimizadas = new ArrayList<String[]>();
        Map<String, String> constantes = new HashMap<String, String>();

        for (String[] cuadrupla : cuadruplasOriginal) {
            String operador = cuadrupla[0];
            String arg1 = cuadrupla[1];
            String arg2 = cuadrupla[2];
            String resultado = cuadrupla[3];

            // Reemplazar argumentos si son constantes
            if (constantes.containsKey(arg1)) {
                cuadrupla[1] = constantes.get(arg1);
            }
            if (constantes.containsKey(arg2)) {
                cuadrupla[2] = constantes.get(arg2);
            }

            switch (operador) {
                case "=":
                    if (esNumero(arg1)) {
                        constantes.put(resultado, arg1);  // Guardar la constante
                    }
                    break;

                case "+":
                case "*":
                case "-":
                case "/":
                    if (esNumero(cuadrupla[1]) && esNumero(cuadrupla[2])) {
                        // Realizar la operación si ambos argumentos son constantes
                        int resultadoOpt = evaluar(operador, Integer.parseInt(cuadrupla[1]), Integer.parseInt(cuadrupla[2]));
                        cuadrupla[0] = "=";
                        cuadrupla[1] = String.valueOf(resultadoOpt);
                        cuadrupla[2] = "";  // Arg2 ya no se necesita
                        constantes.put(resultado, String.valueOf(resultadoOpt));  // Guardar el resultado como constante
                    }
                    break;
            }

            // Añadir la cuádrupla optimizada a la lista
            cuadruplasOptimizadas.add(cuadrupla);
        }

        return cuadruplasOptimizadas;
    }

    //////////////////////////////////////FUNCIONES PARA OPTIMIZAR
    // Función auxiliar para verificar si un valor es numérico
        static boolean esNumero(String str) {
            try {
                Integer.parseInt(str);
                return true;
            } catch (NumberFormatException e) {
                return false;
            }
        }

        // Función para evaluar las operaciones aritméticas
       static int evaluar(String operador, int arg1, int arg2) {
            switch (operador) {
                case "+": return arg1 + arg2;
                case "-": return arg1 - arg2;
                case "*": return arg1 * arg2;
                case "/": return arg1 / arg2;
                default: throw new IllegalArgumentException("Operador no válido: " + operador);
            }
        }
    ///////////////////////////////////////////////////

        public void iniciarAnalisis() throws ParseException {
            boolean key=false;
            while (true) {
                try {
                    Inicio();
                    ImpIntermedio();
                    key=true;
                    break;
                } catch (ParseException e) {
                    key=false;
                    agregarErrorSintactico(traducirMensajeError(e.getMessage()));
                    token = getNextToken();
                }

            }
            if(key){
                writeCppToFile();
            }
        }

        // Método para agregar errores léxicos a la lista
        public void agregarErrorLexico(String mensaje) {
            erroresLexicos.add(mensaje);
        }

        // Método para agregar errores sintácticos a la lista
        public void agregarErrorSintactico(String mensaje) {
            erroresSintacticos.add(mensaje);
        }

        // Método para agregar errores semánticos a la lista
        public void agregarErrorSemantico(String mensaje) {
            erroresSemanticos.add(mensaje);
        }

        // Método para reportar todos los errores encontrados
        public void reportarErrores() {
            if (!erroresLexicos.isEmpty()) {
                System.out.println("Lista de errores léxicos encontrados:");
                for (String error : erroresLexicos) {
                    System.out.println(error);
                }
            }
            if (!erroresSintacticos.isEmpty()) {
                System.out.println("Lista de errores sintácticos encontrados:");
                for (String error : erroresSintacticos) {
                    System.out.println(error);
                }
            }
            if (!erroresSemanticos.isEmpty()) {
                System.out.println("Lista de errores semánticos encontrados:");
                for (String error : erroresSemanticos) {
                    System.out.println(error);
                }
            }
        }

        // Método para traducir mensajes de error
        private String traducirMensajeError(String mensaje) {
            return mensaje
                    .replace("Encountered", "Encontrado")
                    .replace("Was expecting one of:", "Se esperaba uno de los siguientes:")
                    .replace("at line", "en la línea")
                    .replace("column", "columna");
        }

        // Método para agregar una variable a la tabla de símbolos
        public void agregarVariable(Token nombre, String tipo, int linea, int columna) {
             if (tablaSimbolos.containsKey(nombre.image)){
                        erroresSemanticos.add("Error Semantico -> Variable Repetida: " + nombre.image+ " en la linea "+linea+ " columba "+columna);
                    } else {
                        tablaSimbolos.put(nombre.image, tipo);
                    }
        }

        // Método para verificar si una variable está declarada
        public void verificarVariableDeclarada(String nombre) {
            if (!tablaSimbolos.containsKey(nombre)) {
                agregarErrorSemantico("Variable '" + nombre + "' no declarada.");
            }
        }

        // Método para verificar si un token es de un tipo numérico
        private boolean esNumero(Token token) {
            return token.kind == NUMERO;
        }

        // Método para verificar si un token es de tipo entero
        private boolean esEntero(Token token) {
            if (esNumero(token)) {
                try {
                    Integer.parseInt(token.image.replace("\"", ""));
                    return true;
                } catch (NumberFormatException e) {
                    return false;
                }
            }
            return false;
        }

        // Método para verificar si un token es de tipo real
        private boolean esReal(Token token) {
            if (esNumero(token)) {
                try {
                    Double.parseDouble(token.image.replace("\"", ""));
                    return true;
                } catch (NumberFormatException e) {
                    return false;
                }
            }
            return false;
        }

        // Método para verificar si un token es de tipo booleano
        private boolean esBooleano(Token token) {
            return token.kind == TRUE || token.kind == FALSE;
        }

        // Método para verificar si un token es de tipo carácter
        private boolean esCaracter(Token token) {
            return token.kind == CARACTERES && token.image.length() == 3;
        }

        private boolean sonCaracteres(Token token) {
            return token.kind == CADENA && token.image.length() == 3;
                }


        // Método para verificar si un token es de tipo arreglo
        private boolean esArreglo(Token token) {
            return token.kind == ARR && token.image.matches("\\w+\\[\\d+\\]");
        }

        void verificarTiposExpresion(Token operador, Token operando1, Token operando2) {
            if (!esNumero(operando1) || !esNumero(operando2)) {
                agregarErrorSemantico("Operación aritmética con operandos no numéricos en la línea " + operador.beginLine + ", columna " + operador.beginColumn);
            }
        }


           String getCppType(Token tipo) {
               switch (tipo.kind) {
                   case ENTERO: return "int";
                   case REAL: return "float";
                   case BOOLEANO: return "bool";
                   case CARACTER: return "char";
                   case ARR: return "int";
                   case CAD: return "string"; // o el tipo que usas para arreglos
                   default: return "int";
               }
           }

           String determinarTipoExpresion(String exp) {
               // Verificar si es un número entero
               if (exp.matches("\\d+")) {
                   return "ent";
               }
               // Verificar si es un número flotante
               else if (exp.matches("\\d+\\.\\d+")) {
                   return "real";
               }
               // Verificar si es una cadena de texto
               else if (exp.matches("\".*\"")) {
                   return "cad";
               }
               // Verificar si es un identificador declarado
               else if (tablaSimbolos.containsKey(exp)) {
                   return tablaSimbolos.get(exp); // Devuelve el tipo desde la tabla de símbolos
               }
               // Si no coincide con ninguna regla, es un tipo desconocido
               else {
                   erroresSemanticos.add("Error: No se pudo determinar el tipo de la expresión '" + exp + "'.");
                   return "unknown";
               }
           }


        /* En caso de que quiera cadena de caracteres
        private boolean esCaracter(Token token) {
            return token.kind == CADENA;  // Aceptar cualquier token de tipo CARACTERES
        }
        */
    }

PARSER_END(Saludin)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : /* Operadores */ {
          < SUMA: "+" >
        | < RESTA: "-" >
        | < MULTIPLICACION: "*" >
        | < DIVISION: "/" >
        | < ASIGNACION: "=" >
        | < Y: "Y" >
        | < O: "O" >
        | < NO: "NO" >
        | < IGUAL: "==" >
        | < DIFERENTE: "!=" >
        | < MAYOR_QUE: ">" >
        | < MENOR_QUE: "<" >
        | < MAYOR_O_IGUAL_QUE: ">=" >
        | < MENOR_O_IGUAL_QUE: "<=" >
    }
    TOKEN : /* Palabras clave */ {
          < SI: "if" >
        | < ENTONCES: "then" >
        | < SINO: "else" >
        | < MIENTRAS: "while" >
        | < HACER: "do" >
        | < PARA: "for" >
        | < HASTA: "until" >
        | < LEER: "leer" >
        | < ESCRIBIR: "escribir" >
        | < ROMPER: "break" >
        |<RETORNAR: "return">
    }

    TOKEN : /* Tipos de datos */ {
          < ENTERO: "ent" >
        | < REAL: "real" >
        | < CARACTER: "car" >
        | < CAD: "cad">
        | < BOOLEANO: "bool" >
        | < TRUE: "verdadero" >
        | < FALSE: "falso" >
        | < ARR: "arr" >
        | < MATRIZ: "matriz" >
        | < DEF: "def" >
        | < DOS_PUNTOS: ":" >
    }

    TOKEN : {
          < CORCHETE_ABRE: "[" >
        | < CORCHETE_CIERRA: "]" >
}

    TOKEN : {
          < IDENTIFICADOR: <LETRA> (<LETRA> | <DIGITO>)* >
        | < #LETRA: ["a"-"z","A"-"Z","_"] >
        | < #DIGITO: ["0"-"9"] >
        | < NUMERO: (["0"-"9"])+ ("." (["0"-"9"])+)? >
        | < CADENA: "\"" (~["\""])* "\"" >
        | < CARACTERES: "'" (~["'"]) "'" >
        | < PUNTO_Y_COMA: ";" >
        | < PARENTESIS_ABRE: "(" >
        | < PARENTESIS_CIERRA: ")" >
        | < ABRIR_LLAVE: "{" >
        | <CERRAR_LLAVE: "}" >
        | < COMA: "," >
        | < ERROR_TOKEN: ~[] > // Captura cualquier otro carácter no definido
    }


void Inicio() :
{
 cppCode.append("#include <iostream>\nusing namespace std;\n\nint main() {\n");}
{
    ( Declaracion() | Sentencia() | ErrorLexico() )* <EOF>
    {
        cppCode.append("    return 0;\n}\n");
        //writeCppToFile();
    }
}

void Sentencia() :
{ }
{
    SentenciaIf() | SentenciaWhile() | SentenciaFor() | SentenciaEscribir() | SentenciaLeer() | SentenciaAsignacion() | SentenciaBreak() | declaracionFunciones()
}

Token TipoDato() :
{Token tipo;}
{
    tipo = <ENTERO> { return tipo; }
    | tipo = <REAL> { return tipo; }
    | tipo = <BOOLEANO> { return tipo; }
    | tipo = <CARACTER> { return tipo; }
    | tipo = <ARR> { return tipo; }
    | tipo = <CAD> { return tipo; }
}

void Declaracion() :
{ Token id; Token tipo; String valor = null; Token size = null;}
{
    tipo = TipoDato() id = <IDENTIFICADOR>{cppCode.append(getCppType(tipo)+" "+id.image+" ");}
    (
        <CORCHETE_ABRE> size = <NUMERO> <CORCHETE_CIERRA>
        {
            if (tipo.kind != ARR) {
                agregarErrorSemantico("Solo los arreglos pueden tener '[]' como parámetro. Tipo encontrado: " + tipo.image + " en la línea " + tipo.beginLine + ", columna " + tipo.beginColumn);
            } else if (!esEntero(size)) {
                agregarErrorSemantico("Tamaño del arreglo '" + id.image + "' debe ser un entero en la línea " + size.beginLine + ", columna " + size.beginColumn);
            } else if (tablaSimbolos.containsKey(id.image)) {
                agregarErrorSemantico("Arreglo '" + id.image + "' ya declarado en la línea " + id.beginLine + ", columna " + id.beginColumn);
            } else {
                tablaSimbolos.put(id.image, tipo.image);
                codeDirection("declarar_arr", id.image, size.image, "");
                cppCode.append("["+size.image+"];\n");
            }

        }
    )?
    (<ASIGNACION> valor = Expresion() {
        Token tokenValor = getToken(0);

        if (tipo.kind == ENTERO && !esEntero(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un valor entero para la variable '" + id.image + "'.");
        } else if (tipo.kind == REAL && !esReal(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un valor real para la variable '" + id.image + "'.");
        } else if (tipo.kind == BOOLEANO && !esBooleano(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un valor booleano para la variable '" + id.image + "'.");
        } else if (tipo.kind == CARACTERES && !esCaracter(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un carácter para la variable '" + id.image + "'.");
        }
        else if (tipo.kind == CAD && !sonCaracteres(tokenValor)) {
                    agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba una cadena para la variable '" + id.image + "'.");
                }
        else if (tipo.kind == ARR && !esArreglo(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un arreglo para la variable '" + id.image + "'.");
        }
        else if (tipo.kind == CADENA && !esArreglo(tokenValor)) {
            agregarErrorSemantico("Error de tipo en la línea " + tokenValor.beginLine + ", columna " + tokenValor.beginColumn + ": Se esperaba un arreglo para la variable '" + id.image + "'.");
                }
        codeDirection("=", valor, "", id.image);
        //System.out.println(valor);
        cppCode.append("= "+valor+" ");
    }
    )?
    <PUNTO_Y_COMA> {
        agregarVariable(id, tipo.image, id.beginLine, id.beginColumn);
        cppCode.append(";\n");

    }

}

String Expresion() :
{ String t1, t2; Token op; String expr="";}
{
    t1 = Termino(){expr=t1;} ( (op = <SUMA> | op = <RESTA> | op = <IGUAL> | op = <DIFERENTE> | op = <MAYOR_QUE> | op = <MENOR_QUE> | op = <MAYOR_O_IGUAL_QUE> | op = <MENOR_O_IGUAL_QUE> ) t2 = Termino() {
        String temp = genTemporal();

       codeDirection(op.image, t1, t2, temp);
        expr += " " + op.image + " " + t2;
        //System.out.println(expr);
        t1 = temp;
    })*
    { return expr; }
}

String Termino() :
{ String t1, t2; Token op;String expr=""; }
{
    t1 = Factor(){expr=t1;} ( (op = <MULTIPLICACION> | op = <DIVISION> ) t2 = Factor() {
        String temp = genTemporal();
        codeDirection(op.image, t1, t2, temp);
        expr += " " + op.image + " " + t2;
        t1 = temp;
    })*
    { return expr; }
}

String Factor() :
{ String t; }
{
    <NUMERO> { return token.image; }
  | <IDENTIFICADOR> { verificarVariableDeclarada(token.image); return token.image; }
  | <CADENA> { return token.image; }
  | <TRUE> { return "true"; }
  | <FALSE> { return "false"; }
  | <PARENTESIS_ABRE> t = Expresion() <PARENTESIS_CIERRA> { return "("+t+")"; }
  | <IDENTIFICADOR> <CORCHETE_ABRE> t = Expresion() <CORCHETE_CIERRA> { verificarVariableDeclarada(token.image); return token.image + "[" + t + "]"; }
  | <IDENTIFICADOR> <CORCHETE_ABRE> t = Expresion() <CORCHETE_CIERRA> <CORCHETE_ABRE> t = Expresion() <CORCHETE_CIERRA> { verificarVariableDeclarada(token.image); return token.image + "[" + t + "][" + t + "]"; }
}

void SentenciaIf() :
{ String etiquetaInicioIf, etiquetaElse, etiquetaFinIf; String condicion; }
{
    <SI> <PARENTESIS_ABRE> condicion = Expresion() <PARENTESIS_CIERRA> <ABRIR_LLAVE> {
        etiquetaInicioIf = genEtiqueta();
        etiquetaElse = genEtiqueta();
        etiquetaFinIf = genEtiqueta();
        cuadruplos.add(new String[]{"if", condicion, "", etiquetaInicioIf});
        cuadruplos.add(new String[]{"goto", "", "", etiquetaElse});
        cuadruplos.add(new String[]{"label", "", "", etiquetaInicioIf});
        cppCode.append("if (" + condicion + ") {\n");
    }
    BloqueSentencias() {
        cuadruplos.add(new String[]{"goto", "", "", etiquetaFinIf});
        cuadruplos.add(new String[]{"label", "", "", etiquetaElse});
        cppCode.append("}\n");
    }<CERRAR_LLAVE> ( <SINO><ABRIR_LLAVE> {cppCode.append("else {\n");}
    BloqueSentencias(){cppCode.append("}\n");} <CERRAR_LLAVE> )? {
        cuadruplos.add(new String[]{"label", "", "", etiquetaFinIf});
    }
}

void SentenciaWhile() :
{ String etiquetaInicioWhile, etiquetaFinWhile; String condicion; }
{
    <MIENTRAS> <PARENTESIS_ABRE> condicion = Expresion() <PARENTESIS_CIERRA> <ABRIR_LLAVE> {
        etiquetaInicioWhile = genEtiqueta();
        etiquetaFinWhile = genEtiqueta();
        codeDirection("label", "", "", etiquetaInicioWhile);
        codeDirection("if", condicion, "", etiquetaInicioWhile);
        codeDirection("goto", "", "", etiquetaFinWhile);
        codeDirection("label", "", "", etiquetaInicioWhile + "_body");
        cppCode.append("while (" + condicion + ") {\n");
    }
    BloqueSentencias()<CERRAR_LLAVE>{
        codeDirection("goto", "", "", etiquetaInicioWhile);
        codeDirection("label", "", "", etiquetaFinWhile);
         cppCode.append("}\n");
    }
}

void SentenciaFor() :
{ String etiquetaInicioFor, etiquetaFinFor; String expInicio, expCondicion, expIncremento; }
{
    <PARA> <PARENTESIS_ABRE>  {
        etiquetaInicioFor = genEtiqueta();
        cuadruplos.add(new String[]{"label", "", "", etiquetaInicioFor});
    }
    expInicio = Asignacion() <PUNTO_Y_COMA>
    expCondicion = Expresion() <PUNTO_Y_COMA>  {
        etiquetaFinFor = genEtiqueta();
        cuadruplos.add(new String[]{"if", expCondicion, "", etiquetaInicioFor});
        cuadruplos.add(new String[]{"goto", "", "", etiquetaFinFor});
    }
    expIncremento = Asignacion() <PARENTESIS_CIERRA> <ABRIR_LLAVE>{cppCode.append("for (" + expInicio + "; " + expCondicion + "; " + expIncremento + ") {\n");}
        BloqueSentencias() <CERRAR_LLAVE> {
            cuadruplos.add(new String[]{expIncremento, "", "", ""});
            cuadruplos.add(new String[]{"goto", "", "", etiquetaInicioFor});
            cuadruplos.add(new String[]{"label", "", "", etiquetaFinFor});
            cppCode.append("}\n");
    }
}

String Asignacion() :
{ Token id; String exp; }
{
    id = <IDENTIFICADOR> <ASIGNACION> exp = Expresion() {
        verificarVariableDeclarada(id.image);
        codeDirection("=", exp, "", id.image);
        //System.out.println(id.image+"="+exp+";");

        return id.image + " = " + exp;
    }
}

void SentenciaEscribir() ://{ String exp;}
{ String exp; }
{
    <ESCRIBIR> <PARENTESIS_ABRE> exp = Expresion() <PARENTESIS_CIERRA> <PUNTO_Y_COMA> {
        codeDirection("escribir", exp, "", "");
        StringBuilder exp2 = new StringBuilder(exp);
        // Reemplazar todas las apariciones de "+" por "<<"
                int start = exp2.indexOf("+");
                while (start != -1) {
                    exp2.replace(start, start + "+".length(), "<<");
                    start = exp2.indexOf("+", start + "<<".length());}
        cppCode.append("cout << " + exp2.toString() + " << endl;\n");
    }
}

void SentenciaLeer() :
{ Token id; }
{
    <LEER> <PARENTESIS_ABRE> id = <IDENTIFICADOR> <PARENTESIS_CIERRA> <PUNTO_Y_COMA> {
        verificarVariableDeclarada(id.image);
        codeDirection("leer", id.image, "", "");
         cppCode.append("cin >> " + id.image + ";\n");
    }
}


void SentenciaAsignacion() :
{ 
   Token id;
   String exp;
   String tipoVariable;
   String tipoExpresion;}
{
    id = <IDENTIFICADOR> <ASIGNACION> exp= Expresion() <PUNTO_Y_COMA> 
    {
            verificarVariableDeclarada(id.image);
            // Obtener el tipo de la variable
              tipoVariable = tablaSimbolos.get(id.image);
              if (tipoVariable == null) {
                  erroresSemanticos.add("Error: La variable '" + id.image + "' no está declarada.");
              } else {
                  // Suponiendo que Expresion() devuelve el tipo de la expresión
              tipoExpresion = determinarTipoExpresion(exp); // Implementa esta función si es necesario

               // Verificar si los tipos coinciden
              if (!tipoVariable.equals(tipoExpresion)) {
                  erroresSemanticos.add("Error: Incompatibilidad de tipos al asignar a '" + id.image +
                   "'. Esperado: " + tipoVariable + ", pero se encontró: '" + tipoExpresion+"'"+ "en la linea "+id.beginLine);
              }
              }
            codeDirection("=", exp, "", id.image);
            cppCode.append(id.image + "=" + exp + ";");
    }
}

void SentenciaBreak() :
{ }
{
    <ROMPER><PUNTO_Y_COMA>{{cppCode.append("break;\n");}}
}

void ErrorLexico() :
{Token t;}
{
    t = <ERROR_TOKEN> {
        agregarErrorLexico("Carácter inesperado '" + t.image + "' en la línea " + t.beginLine + ", columna " + t.beginColumn);
    }
}

void declaracionFunciones() :
{ Token id, tipo,id2;
  String exp=""; }
{
    <DEF> tipo = TipoDato() id = <IDENTIFICADOR> <PARENTESIS_ABRE> [exp=Parametros() ] <PARENTESIS_CIERRA> <ABRIR_LLAVE> {
        cppCode.append(tipo.image+" "+ id.image+" ("+exp+")"+" {\n");
        if (tablaSimbolos.containsKey(id.image)) {
            agregarErrorSemantico("Función '" + id.image + "' ya declarada.");
        } else {
            agregarVariable(id, tipo.image, id.beginLine, id.beginColumn);
            codeDirection("funcion", id.image, "", "");
        }
    }
    BloqueSentencias() <RETORNAR> id2=<IDENTIFICADOR> <PUNTO_Y_COMA> <CERRAR_LLAVE>{
        cppCode.append("return "+id2.image+";\n");
        cppCode.append("}\n");
        codeDirection("fin_funcion", id.image, "", "");

    }
}

String Parametros() :
{StringBuilder expr = new StringBuilder();
 Token tipo,id;}
{
   tipo=TipoDato() id=<IDENTIFICADOR>{{expr.append(tipo.image+" "+id.image);}} ( <COMA> tipo=TipoDato() id=<IDENTIFICADOR>{expr.append(", "+tipo.image+" "+id.image);})*{
    return expr.toString();
}

}

void BloqueSentencias() :
{}
{
    ( Declaracion() | Sentencia())*
}